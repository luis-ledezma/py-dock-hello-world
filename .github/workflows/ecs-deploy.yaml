name: Build and Deploy - ECS
on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
jobs:
  pylint-check:
    name: Pylint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Create virtual environment
        run: python -m venv venv
        working-directory: ${{ github.workspace }}

      - name: Activate virtual environment and install dependencies
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          deactivate
        working-directory: ${{ github.workspace }}

      - name: Analyze code with Pylint
        run: |
          source venv/bin/activate
          pylint $(git ls-files '*.py')
          deactivate
        working-directory: ${{ github.workspace }} 

  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: pylint-check

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}
      LB_URL: ${{ steps.get-outputs.outputs.LB_URL }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ vars.AWS_ACCOUNT_ID }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: 025066248951.dkr.ecr.us-east-2.amazonaws.com
          ECR_REPOSITORY: py-docker-hello-world
          IMAGE_TAG: "1.0.${{github.run_number}}"
        run: |
          docker build . -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Deploy Amazon EKS Cluster
        id: eks-cluster
        uses: aws-actions/aws-cloudformation-github-deploy@master
        with:
          name: py-dock-hello-world-cluster
          template: cloudformation/amazon-ecs.yaml
          no-fail-on-empty-changeset: "1"
          parameter-overrides: "DockerImage=025066248951.dkr.ecr.us-east-2.amazonaws.com/py-docker-hello-world:1.0.${{github.run_number}}"
      
      - name: Get outputs
        id: get-outputs
        run: |
          {
            echo 'LB_URL<<EOF'
            aws cloudformation --region us-east-2 describe-stacks --stack-name py-dock-hello-world-cluster --query "Stacks[0].Outputs[0].OutputValue"
            echo EOF
          } >> $GITHUB_ENV

      - name: Wait for 200 OK response
        shell: bash
        env:
          LB_URL: "${{ env.LB_URL }}"
        run: |
          #!/bin/bash
          echo "${{ env.LB_URL }}"
          while true; do
              status_code=$(curl -s -o /dev/null -w "%{http_code}" "${{ env.LB_URL }}")
              
              if [ "$status_code" -eq 200 ]; then
                  echo "Received 200 OK response!"
                  break
              else
                  echo "Received $status_code. Waiting..."
                  sleep 5  # Wait for 5 seconds before retrying
              fi
          done
  
  healthcheck:
    name: Healthcheck
    runs-on: ubuntu-latest
    timeout-minutes: 1
    needs: build_and_deploy
    steps:
      - name: Wait for 200 OK response
        shell: bash
        env:
          LB_URL: "${{ needs.build_and_deploy.outputs.LB_URL }}"
        run: |
          #!/bin/bash
          echo "$LB_URL"
          while true; do
              status_code=$(curl -s -o /dev/null -w "%{http_code}" "$LB_URL")
              
              if [ "$status_code" -eq 200 ]; then
                  echo "Received 200 OK response!"
                  break
              else
                  echo "Received $status_code. Waiting..."
                  sleep 5  # Wait for 5 seconds before retrying
              fi
          done
