name: Docker image build and publish
on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
jobs:
  pylint-check:
    name: Pylint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Create virtual environment
        run: python -m venv venv
        working-directory: ${{ github.workspace }}

      - name: Activate virtual environment and install dependencies
        run: |
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          deactivate
        working-directory: ${{ github.workspace }}

      - name: Analyze code with Pylint
        run: |
          source venv/bin/activate
          pylint $(git ls-files '*.py')
          deactivate
        working-directory: ${{ github.workspace }} 

  build_and_deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [pylint-check]

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registries: ${{ vars.AWS_ACCOUNT_ID }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: 025066248951.dkr.ecr.us-east-2.amazonaws.com
          ECR_REPOSITORY: py-docker-hello-world
          IMAGE_TAG: "1.0.${{github.run_number}}"
        run: |
          docker build . -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      
      - name: Generate kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.EKS_CLUSTER_NAME }}
          {
              echo 'EKS_CREDS<<EOF'
              aws eks update-kubeconfig --region ${{ vars.AWS_REGION }} --name ${{ vars.EKS_CLUSTER_NAME }} --dry-run | base64
              echo EOF
          } >> $GITHUB_ENV
      
      - uses: tale/kubectl-action@v1
        with:
          base64-kube-config: ${{ env.EKS_CREDS }}
          kubectl-version: v1.30.0
        env:
          ECR_REGISTRY: 025066248951.dkr.ecr.us-east-2.amazonaws.com/py-docker-hello-world
          IMAGE_TAG: "1.0.${{github.run_number}}"
        run: |
          sed -i.bak "s|DOCKER_IMAGE|$ECR_REGISTRY:$IMAGE_TAG|g" manifests/hello-world-deployment.yaml
          kubectl version
          kubectl config current-context
          kubectl apply -f manifests/hello-world-deployment.yaml
          kubectl apply -f manifests/hello-world-service.yaml